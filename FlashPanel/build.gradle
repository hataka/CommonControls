/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'groovy'

/////////////////////////////////////////////////////////////////////////////
// Properties
defaultTasks 'run'
version = '1.0-SNAPSHOT'
group = 'swt'
description = "Snippet1"
//sourceSets.main.java.srcDirs   = ["$projectDir"]
//sourceSets.main.groovy.srcDirs = ["$projectDir"]
buildDir = 'target'
//buildDir = "$projectDir"
def user_home = System.getenv()['USERPROFILE']+"\\.maven"

// Define the main class for the application
mainClassName = 'swt.Snippet1'
sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}
/*
compileJava {
  options.encoding = 'utf-8'
  copy {
    from 'classes/main'
    into '.'
    include '** /*.class'
    //include '** /*.jsp'
    //exclude { details -> details.file.name.endsWith('.html') &&
    //                     details.file.text.contains('staging') }	
  }
}
*/

/////////////////////////////////////////////////////////////////////////////
// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
		// mavenCentral()
		// mavenLocal()
	  //maven { url "https://raw.githubusercontent.com/maven-eclipse/swt-repo/master/" }
    //maven { url "http://repo.maven.apache.org/maven2" }
		jcenter()
}

try{
	dependencies {
    // This dependency is found on compile classpath of this component and consumers.
  	// Javaの便利ライブラリ Google Guava  
		// http://qiita.com/disc99/items/c4b98045fc4682cbb620
    // Googleが開発しているOSSのjava core libraryで、Googleの多くのJavaベースの
	  // プロジェクトで使用されており、 Java 1.5 以上で使用できる。
		//compile 'com.google.guava:guava:21.0'
    //compile 'org.codehaus.groovy:groovy-all:2.4.10'
		//compile group: 'org.eclipse.swt', name: 'org.eclipse.swt.win32.win32.x86_64', version:'4.4'
    //compile files('C:/eclipse461/workspace/CommonLibrary/CommonLibrary.jar')

		//compile files('F:/java/lib/swt.jar')
		compile files('F:/java/lib/swt-4.7.3-win32-win32-x86_64/swt.jar')
		
		compile files('F:/java/lib/CommonLibrary.jar')
    //compile source'src/main/java', 'src/main/groovy'
		//runtime files('F:/java/lib/swt.jar')
    // Use JUnit test framework
    //testCompile 'junit:junit:4.12'
	}
} catch (Exception ex){}

buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		classpath files('F:/java/lib/swt.jar')
		classpath files('C:/eclipse461/workspace/CommonLibrary/CommonLibrary.jar')
	}
}
/*
// 以下もOK
buildscript {
	repositories {
		maven { url "https://raw.githubusercontent.com/maven-eclipse/swt-repo/master/" }
		maven { url "http://repo.maven.apache.org/maven2" }
	}
	dependencies {
		classpath group: 'org.eclipse.swt', name: 'org.eclipse.swt.win32.win32.x86_64', version:'4.4'
	}
}
*/
/*
ant.importBuild('build.xml') {
  antTaskName -> "ant.${antTaskName}".toString()
}
*/
/////////////////////////////////////////////////////////////////////////////
// Tasks

if (!project.tasks.findByName('create_run_jar')){ 
	task create_run_jar(type: Jar, dependsOn: jar)  {
  	description = 'Create swt Executable Jar in rootDir'
		destinationDir = file("$rootDir")
		//include "taeget/**/*.class"  
		//include "s111a.class"  
		exclude "META-INF/*.SF"  
		//exclude "lib.class"  
		//exclude "swingLib.class"  
		archiveName = "${rootProject.name}.jar"
		manifest {
			attributes 'Main-Class' : mainClassName
		}
  	from configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}
  	from "$buildDir/classes/main"
  	from "$buildDir/resources/main"
		//from zipTree('C:/eclipse461/wor	kspace/CommonLibrary/CommonLibrary.jar')
		from zipTree('F:/java/lib/CommonLibrary.jar')
		from zipTree('F:/java/lib/swt.jar')
		//delete("tmp")
		//delete("libs")
	}
}

if (!project.tasks.findByName('runjar')){ 
	task runjar(dependsOn:[create_run_jar]) {
		description = 'Run Executable Jar  at root'
		doLast {
			//println(jar.archivePath)
			ant.java(jar:"${projectDir}/${project.name}.jar",fork:true)
		}
	}
}
	
if (!project.tasks.findByName('runGroovyScript')){ 
	task runGroovyScript(type: JavaExec) {
		description 'Run Groovy script at src/main/groovy'
		// Set main property to name of Groovy script class.
		//main = 'CurrentDate'
		main = 'Snippet'
		// Set classpath for running the Groovy script.
		classpath = sourceSets.main.runtimeClasspath
  	if (project.hasProperty('custom')) {
			// Pass command-line argument to script.
			args project.getProperty('custom')
		}
	}
}

if (!project.tasks.findByName('listPath')){ 
	task listPath  {
		description 'src配下の*.javaファイルをリストアップします'
  	doLast{
			def path = ant.path {
				fileset(dir: 'src', includes: '**/*.java')
			}
			path.list().each {
				println it
			}
		}
	}
}

if (!project.tasks.findByName('echo_properties')){ 
	task echo_properties << {
		description '組込みプロパティを リストアップします'
		println 'Hello, Gradle!'
		println "|rootDir          |$rootDir|"  // $rootDir の代わりに $project.rootDir でも OK
		println "|project.name     |$project.name|"  // $rootDir の代わりに $project.rootDir でも OK
  	println "|projectDir       |$projectDir|"
  	println "|buildDir         |$buildDir|"
  	println "|gradleHomeDir    |$gradle.gradleHomeDir|"
  	println "|gradleUserHomeDir|$gradle.gradleUserHomeDir|"
  	println "|rootProject.name |$rootProject.name|"
  	println "|description      |$description|"
  	println "|version          |$version|"
  	//println "|userhome         |$user_home|"
	}
}
/**
 * 他のbuild.gradleを呼び出す
 */
if (!project.tasks.findByName('weatherReport')){ 
	task weatherReport(type: GradleBuild) {
		description = "今日の東京のお天気をお伝えします"
		buildFile = 'F:\\java\\gradle\\weatherReport\\build.gradle'
  	tasks = ['weatherReport']
	}
}
/**
 * list all tasks
 * http://stackoverflow.com/questions/38362977/how-to-list-all-tasks-for-the-master-project-only-in-gradle
 */
if (!project.tasks.findByName('printTasks')){ 
	task printTasks << {
  //original  
		project.tasks.collect { task -> println("task="+task+" dependsOn="+task.dependsOn) }
  	//project.tasks.collect { task -> println(task) }
	}
}
/////////////////////////////////////////////////////////////////////////////
// Embed Script
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;

if (!project.tasks.findByName('RunScript')){ 
	task RunScript {
		description = "埋め込みgroovy を実行します"
		doLast {
			Display display = new Display ();
			Shell shell = new Shell(display);
			//swtLib.centerScreen(shell);
			Lib.centerScreen(shell);
			//centerScreen(shell);
			shell.open ();
			while (!shell.isDisposed ()) {
				if (!display.readAndDispatch ()) display.sleep ();
			}
			display.dispose ();
		}
	}
}

public static void centerScreen(Shell shell) {
	Rectangle bds = shell.getDisplay().getBounds();
	Point p = shell.getSize();
	int nLeft = (bds.width - p.x) / 2;
	int nTop = (bds.height - p.y) / 2;
	shell.setBounds(nLeft, nTop, p.x, p.y);
}
